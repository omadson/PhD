clear; clc; close all; addpath(genpath('../'));
%% experiment setup
% 
experiment_name = 'esann_2019';
k_out           = 10;
k_in            = 5;
% data set list
datasets = {'housing','forestfires','concrete'};
% model list and configurations

m_distribuition      = 0.05:0.1:0.95;
lambda_distribuition = 2.^[-8:2:0];
d                    = [10e-5, 0.4, 1]; 

models   = {struct('name', 'MLM',...
                   'complement', 'RN_RN',...
                   'parameters', struct('M', m_distribuition,...
                                        'selection_type',1)),...
            struct('name', 'MLM',...
                   'complement', 'RN_FL',...
                   'parameters', struct('M', m_distribuition,...
                                        'selection_type',2)),...
            struct('name', 'MLM',...
                   'complement', 'FL_RN',...
                   'parameters', struct('M', m_distribuition,...
                                        'selection_type',3)),...
            struct('name', 'MLM',...
                   'complement', 'FL_FL',...
                   'parameters', struct()),...
            struct('name', 'MF_MLM',...
                   'complement', 'MF_MF1',...
                   'parameters', struct('lambda',lambda_distribuition,...
                                        'p', d(1),...
                                        'selection_type',1)),...
            struct('name', 'MF_MLM',...
                   'complement', 'MF_MF2',...
                   'parameters', struct('lambda',lambda_distribuition,...
                                        'p', d(2),...
                                        'selection_type',1)),...
            struct('name', 'MF_MLM',...
                   'complement', 'MF_MF3',...
                   'parameters', struct('lambda',lambda_distribuition,...
                                        'p', d(3),...
                                        'selection_type',1)),...
            struct('name', 'MF_MLM',...
                   'complement', 'MF_FL1',...
                   'parameters', struct('lambda',lambda_distribuition,...
                                        'p', d(1),...
                                        'selection_type',2)),...
            struct('name', 'MF_MLM',...
                   'complement', 'MF_FL2',...
                   'parameters', struct('lambda',lambda_distribuition,...
                                        'p', d(2),...
                                        'selection_type',2)),...
            struct('name', 'MF_MLM',...
                   'complement', 'MF_FL3',...
                   'parameters', struct('lambda',lambda_distribuition,...
                                        'p', d(3),...
                                        'selection_type',2))};


%% dataset loop
for i=1:length(datasets)
    % load data set
    [dataset, dataset_name, index, k_in, k_out] = load_kfold_dataset(experiment_name, datasets{i},  k_out, k_in);
    %% models loop
    for j=1:length(models)
        % verify if this model run
        test_run = verify_model_run(experiment_name, datasets{i}, sprintf('%s_%s', models{j}.name, models{j}.complement));
        if ~test_run
            for k=1:k_out
                fprintf('dataset: %s, model: %s_%s, run: %d\n', datasets{i}, models{j}.name, models{j}.complement, k);
                %% divide dataset
                % train
                X_train = dataset(index{k}.train,1:end-1);
                y_train = dataset(index{k}.train,end);
                % test
                X_test = dataset(index{k}.test,1:end-1);
                y_test = dataset(index{k}.test,end);

                %% execute crossvalidation k-fold
                if isempty(fieldnames(models{j}.parameters))
                    best_parameters = models{j}.parameters;
                    metrics.crossvalidation_time(i) = 0;
                else
                    crossvalidation_time = tic;
                    [best_parameters] = cross_kfold(models{j}.name,...
                                                    models{j}.parameters,...
                                                    index{k}.folds,...
                                                    dataset(index{k}.train,:));
                    metrics.crossvalidation_time(k) = toc(crossvalidation_time); 
                end

                %% create the model and save best parameters
                clf = eval(sprintf('%s(best_parameters);', models{j}.name));
                metrics.best_parameters{k} = best_parameters;

                %% train best model and save time to train
                train_time = tic;
                clf.fit(X_train, y_train);
                metrics.train_time(k) = toc(train_time);
                metrics.model.rp_in(k)  = length(clf.parameters.rp_index_in);
                metrics.model.rp_out(k) = length(clf.parameters.rp_index_out);

    %             metrics.model{i} = clf;

                %% compute and save predict outputs and times
                % train predict
                predict_time_train = tic;
                metrics.y_hat_train{k} = clf.predict(X_train);
                metrics.predict_time_train(k) = toc(predict_time_train);
                % test predict
                predict_time_test = tic;
                metrics.y_hat_test{k} = clf.predict(X_test);
                metrics.predict_time_test(k) = toc(predict_time_test);
            end
            fprintf('-----------------------------------------------\n');
            append_metrics(experiment_name, metrics, datasets{i}, sprintf('%s_%s', models{j}.name, models{j}.complement));
        end
    end
end
fprintf('\n\ndone...')
%% 